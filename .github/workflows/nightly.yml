name: Nightly Build

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes in last 24 hours
        id: check
        run: |
          # Check if there were commits in the last 24 hours
          CHANGES=$(git log --since="24 hours ago" --oneline | wc -l)
          if [ "$CHANGES" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found $CHANGES commits in the last 24 hours"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes in the last 24 hours, skipping build"
          fi

      - name: Generate nightly version
        id: version
        if: steps.check.outputs.has_changes == 'true'
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          NIGHTLY_VERSION="${BASE_VERSION}-nightly.$(date +%Y%m%d)"
          echo "version=${NIGHTLY_VERSION}" >> $GITHUB_OUTPUT

  build-nightly:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        include:
          # Only build for primary platforms in nightly
          - os: windows-latest
            platform: Windows
            ext: exe
          - os: macos-latest
            platform: macOS
            ext: dmg
          - os: ubuntu-latest
            platform: Linux
            ext: AppImage
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Update version
        run: |
          npm version ${{ needs.check-changes.outputs.version }} --no-git-tag-version

      - name: Install dependencies
        run: |
          npm ci
          npm run rebuild

      - name: Build application
        run: npm run build

      - name: Package application
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" = "Windows" ]; then
            npx electron-builder --win --x64 --publish never
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            npx electron-builder --mac --x64 --publish never
          else
            npx electron-builder --linux --x64 --publish never
          fi
        shell: bash

      - name: Upload to nightly release
        uses: actions/upload-artifact@v4
        with:
          name: nightly-${{ matrix.platform }}
          path: release/*.${{ matrix.ext }}
          retention-days: 7

  create-nightly-release:
    needs: [check-changes, build-nightly]
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nightly-*
          path: nightly-builds

      - name: Delete old nightly releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const nightlyReleases = releases.data.filter(r => 
              r.tag_name.includes('nightly') && r.prerelease
            );
            
            // Keep only the last 7 nightly releases
            const toDelete = nightlyReleases.slice(7);
            
            for (const release of toDelete) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              
              // Also delete the tag
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (e) {
                console.log(`Tag ${release.tag_name} may already be deleted`);
              }
            }

      - name: Create nightly release
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ needs.check-changes.outputs.version }}
          name: Nightly Build - ${{ needs.check-changes.outputs.version }}
          body: |
            ## üåô Nightly Build
            
            **Date:** $(date +"%Y-%m-%d")
            **Version:** ${{ needs.check-changes.outputs.version }}
            
            ### ‚ö†Ô∏è Warning
            This is an automated nightly build from the latest main branch.
            - Highly experimental and may be unstable
            - Not recommended for production use
            - No support provided
            - Will be automatically deleted after 7 days
            
            ### üì• Downloads
            Check the assets below for your platform.
            
            ### üìù Changes
            [View recent commits](https://github.com/${{ github.repository }}/commits/main)
          artifacts: "nightly-builds/**/*"
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          artifactErrorsFailBuild: false